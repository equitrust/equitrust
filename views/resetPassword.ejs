



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <link rel="stylesheet" href="/css/Valid.css">
    <title>Equitrust</title>
    <style>
   /* Add this CSS to style the preloader */
.preloader {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(255, 255, 255, 0.8);
    display: none; /* Hidden by default */
    justify-content: center;
    align-items: center;
    z-index: 9999;
}

.spinner {
    border: 4px solid rgba(0, 0, 0, 0.1);
    border-left: 4px solid #3498db;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

    </style>
</head>
<body>
 <div class="wrapper">
   
<!----------------------------- Form box ----------------------------------->    
    <div class="form-box">
        
        <!------------------- login form -------------------------->
        <div class="login-container" id="login">
          <div id="google_translate_element"></div>

            <h1 id="message">Password Reset</h1>
            <form id="signUpForm">
                <input type="hidden" name="token" value="<%= token %>">


              <div class="input-box">
                <input type="password" name="newPassword" id="newPassword" class="input-field" placeholder="newPassword">
                <i class="bx bx-key"></i>
            </div>
           
            <div class="input-box">
             <input type="submit" class="submit" value="Reset">
            </div>

            </form>
           
            
        </div>

        <div id="preloader" class="preloader">
          <div class="spinner"></div>
          <p>Loading...</p>
      </div>


        </div>
       


<!-- hambureger -->
<script>
   
   function myMenuFunction() {
    var i = document.getElementById("navMenu");
    if(i.className === "nav-menu") {
        i.className += " responsive";
    } else {
        i.className = "nav-menu";
    }
   }




   document.getElementById('signUpForm').addEventListener('submit', async function(event) {
            event.preventDefault(); // Prevent the default form submission

            //show preloader
            document.getElementById('preloader').style.display = 'flex';

            const formData = new FormData(this);
            const data = Object.fromEntries(formData.entries());

            try {
                const response = await fetch('/api/users/reset-password', { // Adjust URL based on your route
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data),
                });

                const result = await response.json();

                if (response.ok) {
                    document.getElementById('message').textContent = result.message;
                    document.getElementById('message').style.color = 'green';
                    // Optionally redirect to login page or another page
                    // window.location.href = 'http://localhost:3500/niyu';
                    alert("reset Successful")
                } else {
                    document.getElementById('message').textContent = result.message;
                    document.getElementById('message').style.color = 'red';
                }
            } catch (error) {
              console.log(error)
                document.getElementById('message').textContent = 'An error occurred. Please try again.';
                document.getElementById('message').style.color = 'red';
            }finally{
              document.getElementById('preloader').style.display = 'none';
            }
        });
 
</script>


<script type="text/javascript">
    const chatbotToggler = document.querySelector(".chatbot-toggler");
   const closeBtn = document.querySelector(".close-btn");
   const chatbox = document.querySelector(".chatbox");
   const chatInput = document.querySelector(".chat-input textarea");
   const sendChatBtn = document.querySelector(".chat-input span");
   
   let userMessage = null; // Variable to store user's message
   const inputInitHeight = chatInput.scrollHeight;
   
   // API configuration
   const API_KEY = "PASTE-YOUR-API-KEY"; // Your API key here
   // const API_URL = `https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent?key=${API_KEY}`;
   
   const API_URL = `http://localhost:6400/api/users/customers`;
   
   const createChatLi = (message, className) => {
     // Create a chat <li> element with passed message and className
     const chatLi = document.createElement("li");
     chatLi.classList.add("chat", `${className}`);
     let chatContent = className === "outgoing" ? `<p></p>` : `<span class="material-symbols-outlined">smart_toy</span><p></p>`;
     chatLi.innerHTML = chatContent;
     chatLi.querySelector("p").textContent = message;
     return chatLi; // return chat <li> element
   }
   
   const generateResponse = async (chatElement) => {
     const messageElement = chatElement.querySelector("p");
   
     // Define the properties and message for the API request
     const requestOptions = {
       method: "POST",
       headers: { "Content-Type": "application/json" },
       body: JSON.stringify({ 
         contents: [{ 
           parts: [{ text: userMessage }] 
         }] 
       }),
     }
   
     // Send POST request to API, get response and set the reponse as paragraph text
     try {
       const response = await fetch(API_URL, requestOptions);
       const data = await response.json();
       console.log(data)
       if (!response.ok) throw new Error(data.error.message);
       
       // Get the API response text and update the message element
       messageElement.textContent = data.candidates[0].content.parts[0].text.replace(/\*\*(.*?)\*\*/g, '$1');
     } catch (error) {
       // Handle error
       messageElement.classList.add("error");
       messageElement.textContent = error.message;
     } finally {
       chatbox.scrollTo(0, chatbox.scrollHeight);
     }
   }
   
   const handleChat = () => {
     userMessage = chatInput.value.trim(); // Get user entered message and remove extra whitespace
     if (!userMessage) return;
   
     // Clear the input textarea and set its height to default
     chatInput.value = "";
     chatInput.style.height = `${inputInitHeight}px`;
   
     // Append the user's message to the chatbox
     chatbox.appendChild(createChatLi(userMessage, "outgoing"));
     chatbox.scrollTo(0, chatbox.scrollHeight);
   
     setTimeout(() => {
       // Display "Thinking..." message while waiting for the response
       const incomingChatLi = createChatLi("Thinking...", "incoming");
       chatbox.appendChild(incomingChatLi);
       chatbox.scrollTo(0, chatbox.scrollHeight);
       generateResponse(incomingChatLi);
     }, 600);
   }
   
   chatInput.addEventListener("input", () => {
     // Adjust the height of the input textarea based on its content
     chatInput.style.height = `${inputInitHeight}px`;
     chatInput.style.height = `${chatInput.scrollHeight}px`;
   });
   
   chatInput.addEventListener("keydown", (e) => {
     // If Enter key is pressed without Shift key and the window 
     // width is greater than 800px, handle the chat
     if (e.key === "Enter" && !e.shiftKey && window.innerWidth > 800) {
       e.preventDefault();
       handleChat();
     }
   });
   
   sendChatBtn.addEventListener("click", handleChat);
   closeBtn.addEventListener("click", () => document.body.classList.remove("show-chatbot"));
   chatbotToggler.addEventListener("click", () => document.body.classList.toggle("show-chatbot"));
       // Function to initialize Google Translate widget
       function googleTranslateElementInit() {
           var cookieLang = Cookies.get('user_language');
           new google.translate.TranslateElement({
               pageLanguage: 'en',
               includedLanguages: 'es,fr,de,it',
               layout: google.translate.TranslateElement.InlineLayout.SIMPLE,
               defaultLanguage: cookieLang || 'en'
           }, 'google_translate_element');
       }
   
       // Function to change language
       function changeLanguage(lang) {
           var translateElement = google.translate.TranslateElement.getInstance({layout: google.translate.TranslateElement.InlineLayout.SIMPLE});
           translateElement.dispose(); // Dispose the current translator instance
           Cookies.set('user_language', lang);
           googleTranslateElementInit(); // Reinitialize with the new language
       }
   </script>
           <script type="text/javascript" src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>

</body>
</html>
